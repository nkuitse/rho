#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use File::Basename qw(dirname basename);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;

my %database;
my %trx;
my (@includes, $verbose);

GetOptions(
    'i|include=s' => \@includes,
    'v|verbose' => \$verbose,
);
usage if !@ARGV;
run();

# --- Functions

sub run {
    usage if @ARGV < 1;
    my $repfile = shift @ARGV;
    my %arg = args(@ARGV);
    xchdir(dirname($repfile));
    print STDERR "Parsing report file......" if $verbose;
    my $report = read_report(basename($repfile));
    print STDERR "OK\n" if $verbose;
    %database = ( %database, %{ $report->{'databases'} || {} } );
    print STDERR "Checking arguments......." if $verbose;
    check_args($report, \%arg);
    print STDERR "OK\n" if $verbose;
    my $init = $report->{'initializers'};
    my @inits = ref($init) ? @$init: ($init);
    print STDERR "Running initializer(s)..." if $verbose && @inits;
    foreach my $q (@inits) {
        my $db = $q->{'target'};
        my $dbh = begin(dbh($db));
        my ($sth, @params) = prepare_sql($dbh, $q->{'body'}, \%arg);
        $sth->execute(@params);
    }
    print STDERR "OK\n" if $verbose && @inits;
    my $iosteps = $report->{'iosteps'};
    my $nrows = 0;
    my @iosteps = ref($iosteps) ? @$iosteps : ($iosteps);
    print STDERR "Generating report........" if $verbose && @iosteps;
    foreach my $q (@iosteps) {
        my ($r, $w) = @$q{qw(read write)};
        my $reader = $database{$r->{'id'}} or fatal "no such database: $r->{'id'}";
        my $writer = $database{$w->{'id'}} or fatal "no such database: $w->{'id'}";
        die "attempt to write to a read-only database $r->{'id'}"
            if $writer->{'read_only'};
        my $wdbh = begin(dbh($writer));
        my ($rsth, @rparams) = prepare_sql(dbh($reader), $r->{'body'}, \%arg);
        my ($wsth, @wparams) = prepare_sql($wdbh, $w->{'body'}, \%arg);
        fatal "writer has external params" if @wparams;
        $rsth->execute(@rparams);
        while (my @row = $rsth->fetchrow_array) {
            $wsth->execute(@row);
            $nrows++;
        }
    }
    print STDERR "OK\n" if $verbose && @iosteps;
    my $finish = $report->{'finishers'};
    my @finish = ref($finish) ? @$finish : ($finish);
    print STDERR "Running finisher(s)..." if $verbose && @finish;
    foreach my $q (@finish) {
        my $db = $q->{'target'};
        my $dbh = begin(dbh($db));
        my ($sth, @params) = prepare_sql($dbh, $q->{'body'}, \%arg);
        $sth->execute(@params);
    }
    print STDERR "OK\n" if $verbose && @finish;
    end();
    if ($nrows == 1) {
        print STDERR "$nrows row read and written\n";
    }
    else {
        print STDERR "$nrows rows read and written\n";
    }
}

sub begin {
    my ($dbh) = @_;
    my $trx = $trx{$dbh} ||= [ 0, $dbh ];
    if (++$trx->[0] == 1) {
        $dbh->begin_work;
    }
    return $dbh;
}

sub end {
    foreach my $trx (values %trx) {
        $trx->[1]->commit;
    }
    %trx = ();
}

sub prepare_sql {
    my ($dbh, $sql, $args) = @_;
    my @bind;
    $sql =~ s{
        < ([\$\@]) (\w+) >
    }{
        placeholder($1, $2, $args->{$2}, \@bind)
    }exg;
    my $sth = $dbh->prepare($sql);
    return ($sth, @bind);
}

sub placeholder {
    my ($sigil, $key, $val, $bind) = @_;
    if ($sigil eq '$') {
        return 'NULL' if !defined $val;
        if (ref($val)) {
            die if @$val > 1;
            ($val) = @$val;
        }
        push @$bind, $val;
        return '?';
    }
    elsif ($sigil eq '@') {
        die if !$val;
        $val = [$val] if !ref $val;
        my @val = @$val;
        push @$bind, @val;
        return join(', ', '?' x scalar(@val));
    }
    else {
        die "wtf?";
    }
}

sub prepare_sql_file {
    my ($dbh, $f, $params) = @_;
    open my $fh, '<', $f or fatal "open $f: $!";
    local $/;
    my $sql = <$fh>;
    my @params;
    if ($sql =~ s{\A/\*\s*PARAMS\s*\*/\n}{}) {
        while ($sql =~ s{\A/\*\s*([1-9][0-9]*)\s+(\S+)\s*\*/\n}{}) {
            my ($i, $k) = ($1, $2);
            $params[$i-1] = $params->{$k};
        }
    }
    my $sth = $dbh->prepare($sql);
    return ($sth, @params);
}

# --- Other functions

sub dbh {
    my ($db) = @_;
    my $database = ref($db) ? $db : $database{$db}
        or fatal "no such database: $db";
    return $database->{'dbh'} ||= DBI->connect(@$database{qw(dsn user password)}, { 'RaiseError' => 1, 'AutoCommit' => 1 });
}

sub xchdir {
    foreach my $dir (@_) {
        chdir $dir or fatal "chdir $dir: $!";
    }
}

sub xmkdir {
    foreach my $dir (@_) {
        -d $dir or mkdir $dir or fatal "mkdir $dir: $!";
    }
}

sub args {
    my %param;
    foreach (@_) {
        my ($k, $v) = split /=/, $_, 2;
        if (exists $param{$k}) {
            $param{$k} = [ $param{$k} ] if !ref $param{$k};
            push @{ $param{$k} }, $v;
        }
        else {
            $param{$k} = $v;
        }
    }
    return %param;
}

sub check_args {
    my ($report, $args) = @_;
    my $params = $report->{'parameters'};
    # For example:
    #   $params = {
    #     'msg' => {
    #       key => 'msg',
    #       qualifiers => {
    #         default => 'Hello world',
    #       },
    #       title => 'Message',
    #     },
    #   };
    foreach my $param (values %$params) {
        my $key = $param->{'key'};
        my $qual = $param->{'qualifiers'} || {};
        my $title = $param->{'title'};
        if (!exists $args->{$key}) {
            if (exists $qual->{'default'}) {
                $args->{$key} = $qual->{'default'};
            }
            elsif ($qual->{'required'}) {
                fatal "required parameter not specified: $key $title";
            }
        }
    }
}

sub read_report {
    my ($f) = @_;
    my %report = (
        'metadata' => {},
        'parameters' => {},
        'databases' => {},
        'initializers' => [],
        'iosteps' => [],
        'finishers' => [],
    );
    _read_file($_, \%report) for @includes;
    _read_file($f, \%report);
}

sub _read_file {
    my ($f, $report, %limits) = @_;
    open my $fh, '<', $f or die;
    local $_;
    {
        local $/;
        $_ = <$fh>;
    }
    my ($meta, $param, $database, $inits, $iosteps, $finishers)
        = @$report{qw(metadata parameters databases initializers iosteps finishers)};
    while (s/\A\s*(?=\S)//) {
        _strip_comments();
        my ($block, $type, $include);
        if ($block = _metadata()) {
            $type = 'metadata';
            %$meta = ( %$meta, %{ $block->{'body'} } );
        }
        elsif ($block = _parameters()) {
            $type = 'parameters';
            %$param = ( %$param, %{ $block->{'body'} } );
        }
        elsif ($block = _database()) {
            $type = 'databases';
            %$block = ( %$block, %{ $block->{'body'} } );
            my $id = $block->{'id'};
            $database->{$id} = $block;
        }
        elsif ($block = _init()) {
            $type = 'initializers';
            push @$inits, $block;
        }
        elsif ($block = _iostep()) {
            $type = 'iosteps';
            push @$iosteps, $block;
        }
        elsif ($block = _finish()) {
            $type = 'finishers';
            push @$finishers, $block;
        }
        elsif ($include = _include()) {
            $type = 'include';
        }
        else {
            my ($line) = split /\n/;
            fatal "unparseable: line in file $f: $line";
        }
        if (defined $limits{$type} && (!$limits{$type} || !$limits{'*'})) {
            fatal "unexpected block ($type) in file $f";
        }
        _read_file($include, $report, %limits) if $include;
    }
    return $report;
}

sub _strip_comments {
    s{\A(\s*(?:#.*)?\n)+}{};
}

sub _strip_whitespace {
    s{\A\s+}{};
}

sub _metadata {
    return _keyval_block(qr/meta(?:data)?/, sub {
        local $_ = shift;
        my ($k) = @_;
        my $line = $k . ' ' . $_;
        my $tok = _bareword();
            return $tok if defined $tok;
        $tok = _filepath();
            return $tok if defined $tok;
        $tok = _quoted_string_value();
            return $tok if defined $tok;
        fatal "invalid metadata: $line";
    });
}

sub _iostep {
    my $read = _read_block() or return;  # _string_block('read') // return;
    _strip_comments();
    _strip_whitespace();
    my $write = _write_block() or fatal "reader without writer";  # _string_block('write') // fatal "reader without writer";
    return {
        'read' => $read,
        'write' => $write,
    };
}

sub _read_block {
    return if !s{
        \A
        \s*
        read
        \s+
        from
        \s+
    }{}x;
    my $database = _bareword();
    fatal("expected database ID: ", (split /\n/, $_, 2)[0])
        if !defined $database;
    fatal "incomplete read block"
        if !s{\A\s+\{\s*}{};
    my $body = '';
    my %block = ('id' => $database);
    while (!s{\A\s*\}}{}) {
        fatal if !s{(.+\n)}{};
        $body .= $1;
    }
    $block{'body'} = $body;
    return \%block;
}

sub _write_block {
    return if !s{
        \A
        \s*
        write
        (?:
            \s+
            to
            \s+
            (\w+)
        )?
        \s+
        \{
    }{}x;
    my $database = defined $1 ? $1 : 'output';
    my $body = '';
    my %block = ('id' => $database);
    while (!s{\A\s*\}}{}) {
        fatal if !s{(.+\n)}{};
        $body .= $1;
    }
    $block{'body'} = $body;
    return \%block;
}

sub _database {
    return _keyval_block(qr/database|source|destination|output/, sub {
        local $_ = shift;
        my ($k, $block) = @_;
        $block->{'read_only'} = 1 if $block->{'type'} eq 'source';
        $block->{'id'} = $block->{'title'} if defined $block->{'title'} && $block->{'id'} =~ /^(?:source|destination)$/;
        $block->{'id'} = 'output' if !defined $block->{'id'} && $block->{'type'} eq 'output';
        my $line = $k . ' ' . $_;
        if ($k =~ /^(dsn|user|password)$/) {
            my $tok = _quoted_string_value();
            return $tok if defined $tok;
            fatal "invalid $k: $line";
        }
        elsif ($k eq 'options') {
            my %opt;
            while (/\S/) {
                my $opt = _bareword();
                fatal "expected option key: $line"
                    if !defined $opt;
                s/\A\s+//;
                my $val = _quoted_string_value();
                $val = 1 if !defined $val;
                $opt{$opt} = $val;
                s/\A\s*,//;  # Optional comma
                s/\A\s+//;
                last if s/\A;\s*//;
            }
            return \%opt;
        }
    });
}

sub _parameters {
    return _keyval_block(qr/param(?:eter)?s/, sub {
        local $_ = shift;
        my ($k) = @_;
        my $line = $k . ' ' . $_;
        my $title = _quoted_string_value()
            or fatal "untitled parameter: $line";
        my %qual;
        while (!s{\A\s*;\z}{}) {
            s{\A\s+}{};
            my $w = _bareword() or fatal "unrecognized token in parameter definition: $line";
            if ($w =~ /^(default|hint|example|match(?:es|ing)?)$/) {
                s{\A\s+}{} or fatal "parameter qualifier $w not followed by whitespace: $line";
                my $v = _quoted_string_value();
                $v = _bareword() if !defined $v;
                fatal "parameter qualifier $w lacks required value: $line"
                    if !defined $v;
                $qual{$w} = $v;
            }
            else {
                $qual{$w} = 1;
            }
            s/\A\s*,//;  # Optional comma
        }
        return {
            'key' => $k,
            'title' => $title,
            'qualifiers' => \%qual,
        };
    });
}

sub _init {
    my $block = _string_block('initialize')
        or return;
    $block->{'target'} = delete $block->{'id'}
        or fatal "no target for initializer";
    return $block;
}

sub _finish {
    my $block = _string_block('finish')
        or return;
    $block->{'target'} = delete $block->{'id'}
        or fatal "no target for finisher";
    return $block;
}

sub _include {
    return if !s/\Ainclude\s+//;
    my $f = _filepath()
        or fatal "include without file argument";
    return $f;
}

sub _string_block {
    my ($rxhead) = @_;
    return if !s{
        \A
        ($rxhead)
        (?:
            \s+ (\w+)
        )?
        (?:
            \s+ "([^"\n]+)"
        )?
        \s+
        \{
    }{}x;
    my $body = '';
    my %block = ('type' => $1, 'id' => $2, 'title' => $3);
    while (!s{\A\s*\}}{}) {
        fatal if !s{(.+\n)}{};
        $body .= $1;
    }
    $block{'body'} = $body;
    return \%block;
}

sub _keyval_block {
    my ($rxhead, $linesub) = @_;
    return if !s{
        \A
        ($rxhead)
        (?:
            \s+ (\w+)
        )?
        (?:
            \s+ "([^"\n]+)"
        )?
        \s+
        \{
    }{}x;
    my %hash;
    my %block = ('type' => $1, 'id' => $2, 'title' => $3, 'body' => \%hash);
    while (1) {
        _strip_comments();
        last if s{\A\s*\}}{};
        fatal "unterminated block" if !/\S/;
        s{\A\s*(\w+)\s+(.+)\n}{}
            or fatal "unrecognized line in $block{'type'}: $_";
        $hash{$1} = $linesub->($2, $1, \%block);
    }
    return \%block;
}

sub _bareword {
    return if !s/\A(\w+)//;
    return $1;
}

sub _filepath {
    return $1 if s{\A(\.{0,2}/[^\s;]+)}{};
    return _quoted_string_value();
}

sub _quoted_string_value {
    return if !s/\A"((?:\\.|[^\\"\n])*)"//;
    return unescape($1);
}

sub unescape {
    local $_ = shift;
    s{\\(.)}{$1}g;
    return $_;
}

sub usage {
    print STDERR "usage: rho FILE [KEY=VAL...]\n";
    exit 1;
}

sub fatal {
    print STDERR "rho: @_\n";
    exit 2;
}

